<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int QSIZE = 20;
const int MACHINES = 5;
typedef int[0,MACHINES-1] id_b;
const int computationPower[MACHINES]= {330, 220, 110, 180,110};
const int powerConsumption[MACHINES] = {110, 65, 30, 70, 30};
const int idleConsumption[MACHINES] = {80, 40, 20, 50, 60};
int numberOfTaskInQueue = 0;
bool machineBusy[MACHINES];
int machineBids[MACHINES];
int machineWonAuction;
int secondPriceBid;
int assignedTask[MACHINES];

broadcast chan newTaskForAuction, taskFinished, newTaskBought,auctionConcluded;
typedef struct{
    int deadLine;
    int processingUnits;
}task;
int taskUpForAuction;
task taskList[QSIZE];






</declaration>
	<template>
		<name>TaskGenerator</name>
		<declaration>clock time;
const int taskToCreate = 10;
int i;
int index= 0;
void createTask(int DL, int PU){
    taskList[index].deadLine=DL;
    taskList[index].processingUnits=PU;
    index++;
    numberOfTaskInQueue++;
}</declaration>
		<location id="id0" x="0" y="-34">
			<label kind="invariant" x="-10" y="-17">time&lt;5</label>
		</location>
		<location id="id1" x="0" y="136">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="8" y="51">taskToCreate &lt;= i</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="59" y="-153">DL : int [50,50],
PU: int [500,500]</label>
			<label kind="guard" x="51" y="-93">taskToCreate &gt;i</label>
			<label kind="assignment" x="51" y="-76">createTask(DL,PU),
time = 0,
i++</label>
			<nail x="68" y="-102"/>
			<nail x="-59" y="-102"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Distributor</name>
		<declaration>// Place local declarations here.
int distributorIndex =  0;
int i,y,index;

bool systemBusy; 
clock t;
bool allMachineBusy(){
    for (y =0; y&lt;MACHINES;++y){
        if(!machineBusy[y]){
            return false;
        }
    }
    return true;
}


void chooseWinner(){
    int x,lowestBid, secondLowest, count;
    int lowestBidPrice= 10000;
    
    for(x = 0; x&lt;MACHINES;x++){
        if(!machineBusy[x] ){
            count++;
            index = x;
        }
    }
    //if only one machine is busy then give the task to that machine others find the second lowest bidder.
    if(count != 1){
        //first loop finds lowest
        for (x = 0; x&lt;MACHINES; x++){
            if(machineBids[x]&lt;lowestBidPrice){
                lowestBidPrice = machineBids[x];
                lowestBid = x;
            }  
        }
        //second loop finds second lowest
        for (x = 0; x&lt;MACHINES; x++){
            if(x!=lowestBid &amp;&amp; machineBids[x] &lt; machineBids[secondLowest]){
                secondLowest = x;
                index = x;
            }
        }
        secondPriceBid = machineBids[index];
        index = lowestBid;
    }

    machineWonAuction = index;
    machineBusy[index]=true;
    systemBusy = allMachineBusy(); 
}

void resetAution(){
    int x; 
    
    for( x=0;x&lt;MACHINES;x++){
        machineBids[x]=10000;  
    }

}</declaration>
		<location id="id2" x="68" y="-17">
			<name x="85" y="-25">idle</name>
			<label kind="invariant" x="85" y="-8">numberOfTaskInQueue &lt;= 1</label>
		</location>
		<location id="id3" x="0" y="-110">
			<name x="17" y="-119">working</name>
			<urgent/>
		</location>
		<location id="id4" x="-187" y="-195">
			<name x="-204" y="-229">waiting</name>
		</location>
		<location id="id5" x="0" y="-204">
			<name x="17" y="-212">auctioning</name>
			<urgent/>
		</location>
		<location id="id6" x="0" y="-297">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id5"/>
			<target ref="id6"/>
			<label kind="assignment" x="8" y="-255">chooseWinner()</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-119" y="0">numberOfTaskInQueue == 0</label>
			<nail x="0" y="-17"/>
			<nail x="0" y="-17"/>
			<nail x="0" y="-17"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-153" y="-263">auctionConcluded!</label>
			<label kind="assignment" x="-127" y="-246">resetAution()</label>
			<nail x="-42" y="-204"/>
			<nail x="-17" y="-144"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="17" y="-178">!systemBusy &amp;&amp; numberOfTaskInQueue &gt; 0</label>
			<label kind="synchronisation" x="17" y="-144">newTaskForAuction!</label>
			<label kind="assignment" x="17" y="-161">numberOfTaskInQueue--</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-187" y="-93">taskFinished?</label>
			<label kind="assignment" x="-187" y="-76">systemBusy = false</label>
			<nail x="-187" y="-110"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-136" y="-195">systemBusy</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="42" y="-85">numberOfTaskInQueue&gt;0</label>
		</transition>
	</template>
	<template>
		<name>Machine</name>
		<parameter>const id_b id</parameter>
		<declaration>int localComputationPower=  computationPower[id];
int localPowerConsumption =  powerConsumption[id];
int localIdlePowerConsumption = idleConsumption[id];
int bidUsed;
clock t;
int computationDone;
bool taskDone;
void processing(){
    computationDone += localComputationPower;
    if (computationDone&gt;=taskList[assignedTask[id]].processingUnits){
      
        taskDone= true;
    }
}

void bidOnAution(){ // midlertidig implementation
    int timeToComplete = taskList[taskUpForAuction].processingUnits/localComputationPower;
    int bid = timeToComplete*localPowerConsumption; 
    machineBids[id] = ++bid;
    
}</declaration>
		<location id="id7" x="91" y="33">
			<name x="68" y="-8">bidding</name>
			<committed/>
		</location>
		<location id="id8" x="-119" y="34">
			<name x="-153" y="8">idle</name>
		</location>
		<location id="id9" x="0" y="-119">
			<name x="17" y="-153">working</name>
			<label kind="invariant" x="17" y="-136">t&lt;=5</label>
		</location>
		<location id="id10" x="-119" y="-119">
			<committed/>
		</location>
		<location id="id11" x="246" y="34">
		</location>
		<init ref="id8"/>
		<transition>
			<source ref="id11"/>
			<target ref="id8"/>
			<label kind="guard" x="-101" y="127">machineWonAuction != id</label>
			<label kind="synchronisation" x="-25" y="136">auctionConcluded?</label>
			<nail x="246" y="161"/>
			<nail x="-119" y="161"/>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id9"/>
			<label kind="guard" x="153" y="-93">machineWonAuction == id</label>
			<label kind="synchronisation" x="161" y="-76">auctionConcluded?</label>
			<label kind="assignment" x="18" y="-42">bidUsed = secondPriceBid</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="assignment" x="127" y="42">bidOnAution()</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="synchronisation" x="-79" y="33">newTaskForAuction?</label>
			<label kind="assignment" x="-79" y="50">computationDone = 0,
taskDone = false,
t=0</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-93" y="-136">!taskDone</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id8"/>
			<label kind="guard" x="-187" y="-68">taskDone</label>
			<label kind="synchronisation" x="-212" y="-85">taskFinished!</label>
			<label kind="assignment" x="-280" y="-51">machineBusy[id] = false,
taskDone = false</label>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-51" y="-280">t&gt;=5</label>
			<label kind="assignment" x="-51" y="-263">processing(),
t=0</label>
			<nail x="0" y="-221"/>
			<nail x="-119" y="-221"/>
			<nail x="-119" y="-144"/>
			<nail x="-119" y="-144"/>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Distributor, Machine, TaskGenerator;
    </system>
	<queries>
		<query>
			<formula>A[] numberOfTaskInQueue &gt;= 0</formula>
			<comment></comment>
		</query>
		<query>
			<formula>A[] not (Distributor.delegating &amp;&amp; deadlock)</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Distributor.working --&gt; Distributor.idle</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Distributor.waiting --&gt; Distributor.working</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Distributor.delegating --&gt; Distributor.working</formula>
			<comment></comment>
		</query>
		<query>
			<formula>Machine(1).working --&gt; Machine(1).idle</formula>
			<comment></comment>
		</query>
		<query>
			<formula>E&lt;&gt; numberOfTaskInQueue == 10</formula>
			<comment>Hvorfor du denne verifier? burde urgent ikke stoppe det. Sp√∏rg Florian.</comment>
		</query>
	</queries>
</nta>
