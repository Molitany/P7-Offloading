<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>// Place global declarations here.
const int QSIZE = 20;
const int MACHINES = 3;
typedef int[0,MACHINES-1] id_b;
const int computationPower[3]= {3,7,1};
const int powerConsumption[3] = {2,5,1};
int numberOfTaskInQueue = 0;
bool machineBusy[MACHINES];
int assignedTask[MACHINES];

broadcast chan newTaskDelecated, taskFinished;
typedef struct{
    int deadLine;
    int processingUnits;
}task;

task taskList[QSIZE];






</declaration>
	<template>
		<name>TaskGenerator</name>
		<declaration>clock time;
const int taskToCreate = 5;
int i;
int index= 0;
void createTask(int DL, int PU){
    taskList[index].deadLine=DL;
    taskList[index].processingUnits=PU;
    index++;
    numberOfTaskInQueue++;
}</declaration>
		<location id="id0" x="0" y="-34">
			<label kind="invariant" x="-10" y="-17">time&lt;5</label>
		</location>
		<location id="id1" x="0" y="136">
		</location>
		<init ref="id0"/>
		<transition>
			<source ref="id0"/>
			<target ref="id1"/>
			<label kind="guard" x="8" y="51">taskToCreate &lt;= i</label>
		</transition>
		<transition>
			<source ref="id0"/>
			<target ref="id0"/>
			<label kind="select" x="59" y="-153">DL : int [50,100],
PU: int [100,500]</label>
			<label kind="guard" x="51" y="-93">taskToCreate &gt;i</label>
			<label kind="assignment" x="51" y="-76">createTask(DL,PU),
time = 0,
i++</label>
			<nail x="68" y="-102"/>
			<nail x="-59" y="-102"/>
		</transition>
	</template>
	<template>
		<name x="5" y="5">Distributor</name>
		<declaration>// Place local declarations here.
int distributorIndex =  0;
int i,y;
bool selected;
bool systemBusy; 
bool allMachineBusy(){
    for (y =0; y&lt;MACHINES;++y){
        if(!machineBusy[y]){
            return false;
        }
    }
    return true;
}
void delecateTask(){
    selected = false;
    for (i = 0; i&lt;MACHINES &amp;&amp; !selected;++i) {
        if(!machineBusy[i]){
            machineBusy[i]= true ;
            assignedTask[i] = distributorIndex;
            distributorIndex++;
            selected = true;
                
        }
    }
    systemBusy = allMachineBusy(); 
}

  </declaration>
		<location id="id2" x="0" y="0">
		</location>
		<location id="id3" x="0" y="-110">
		</location>
		<location id="id4" x="-187" y="-195">
		</location>
		<location id="id5" x="8" y="-204">
			<committed/>
		</location>
		<init ref="id2"/>
		<transition>
			<source ref="id5"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-76" y="-238">newTaskDelecated!</label>
			<nail x="-42" y="-204"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id5"/>
			<label kind="guard" x="17" y="-178">!systemBusy</label>
			<label kind="assignment" x="17" y="-161">delecateTask()</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-153" y="-76">taskFinished?</label>
			<label kind="assignment" x="-170" y="-93">systemBusy = false</label>
			<nail x="-187" y="-110"/>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id4"/>
			<label kind="guard" x="-136" y="-195">systemBusy</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id3"/>
			<label kind="guard" x="8" y="-76">numberOfTaskInQueue&gt;0</label>
		</transition>
	</template>
	<template>
		<name>Machine</name>
		<parameter>const id_b id</parameter>
		<declaration>int localComputationPower=  computationPower[id];
int localPowerConsumption =  powerConsumption[id];
clock t;
int computationDone;
bool taskDone;
void processing(){
    computationDone += localComputationPower;
    if (computationDone&gt;=taskList[assignedTask[id]].processingUnits){
      
        taskDone= true;
    }
}</declaration>
		<location id="id6" x="0" y="0">
		</location>
		<location id="id7" x="0" y="-119">
			<label kind="invariant" x="25" y="-127">t&lt;=5</label>
		</location>
		<location id="id8" x="-119" y="-119">
			<committed/>
		</location>
		<init ref="id6"/>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-102" y="-153">!taskDone</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id6"/>
			<label kind="guard" x="-153" y="-42">taskDone</label>
			<label kind="synchronisation" x="-153" y="-59">taskFinished!</label>
			<label kind="assignment" x="-187" y="-25">machineBusy[id] = false,
numberOfTaskInQueue--,
taskDone = false</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id8"/>
			<label kind="guard" x="-17" y="-280">t&gt;=5</label>
			<label kind="assignment" x="-17" y="-263">processing(),
t=0</label>
			<nail x="102" y="-221"/>
			<nail x="-67" y="-221"/>
			<nail x="-110" y="-136"/>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id7"/>
			<label kind="guard" x="0" y="-93">machineBusy[id]</label>
			<label kind="synchronisation" x="0" y="-76">newTaskDelecated?</label>
			<label kind="assignment" x="0" y="-59">computationDone = 0,
taskDone = false</label>
		</transition>
	</template>
	<system>// Place template instantiations here.

// List one or more processes to be composed into a system.
system Distributor, Machine, TaskGenerator;
    </system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
